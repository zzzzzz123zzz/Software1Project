import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Jeng Zhuang
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel")
                : "" + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        // Extract channel title
        int titleIndex = getChildElement(channel, "title");
        String titleText = "Empty Title";
        if (titleIndex != -1) {
            XMLTree titleTag = channel.child(titleIndex);
            if (titleTag.numberOfChildren() > 0) {
                // Get the text inside the <title> tag
                titleText = titleTag.child(0).label();

            }
        }

        // Extract channel link
        int linkIndex = getChildElement(channel, "link");
        XMLTree linkTag = channel.child(linkIndex);
        // Get the text inside the <link> tag
        String link = linkTag.child(0).label();

        // Extract channel description
        int descIndex = getChildElement(channel, "description");
        String descText = "No description";
        if (descIndex != -1) {
            XMLTree descTag = channel.child(descIndex);
            if (descTag.numberOfChildren() > 0) {
                // Get the text inside the <description> tag
                descText = descTag.child(0).label();
            }
        }

        // Output HTML header
        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + titleText + "</title>");
        out.println("</head>");
        out.println("<body>");
        // Add the channel title as a link
        out.println("<h1><a href=\"" + link + "\">" + titleText + "</a></h1>");
        // Add the channel description
        out.println("<p>" + descText + "</p>");
        // Start the table
        out.println("<table border=\"1\">");
        out.println("<tr>");
        // Add table headers
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>"); // Close the table
        out.println("</body>"); // Close the body
        out.println("</html>"); // Close the HTML document
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre> not found]
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int index = -1; // Initialize with -1
        int i = 0;
        while (i < xml.numberOfChildren() && index == -1) {
            // Continue until a match is found or all children are checked
            XMLTree child = xml.child(i);
            if (child.isTag() && child.label().equals(tag)) {
                index = i; // Store the index of the first matching child
            }
            i++;
        }
        return index; // Return the result after the loop
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item")
                : "" + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        // Process publication date
        String date = "No date available";
        int pubDateIndex = getChildElement(item, "pubDate");
        if (pubDateIndex != -1) {
            XMLTree pubDateTag = item.child(pubDateIndex);
            // Get the text inside the <pubDate> tag
            date = pubDateTag.child(0).label();
        }

        // Process source
        String source = "No source available";
        int sourceIndex = getChildElement(item, "source");
        if (sourceIndex != -1) {
            XMLTree sourceTag = item.child(sourceIndex);
            // Get the URL attribute
            String url = sourceTag.attributeValue("url");
            String text = "";
            if (sourceTag.numberOfChildren() > 0) {
                // Get the text inside the <source> tag
                text = sourceTag.child(0).label();
            } else {
                text = url; // Use the URL as the text if no text is available
            }
            source = "<a href=\"" + url + "\">" + text + "</a>"; // Create a hyperlink
        }

        // Process news text and link
        String newsText = "";
        int titleIndex = getChildElement(item, "title");
        if (titleIndex != -1) {
            XMLTree titleTag = item.child(titleIndex);
            if (titleTag.numberOfChildren() > 0) {
                newsText = titleTag.child(0).label();
            }
        }

        if (newsText.isEmpty()) {
            int descIndex = getChildElement(item, "description");
            if (descIndex != -1) {
                XMLTree descTag = item.child(descIndex);
                if (descTag.numberOfChildren() > 0) {
                    // Get the text inside the <title> tag
                    newsText = descTag.child(0).label();
                }
            }
        }

        if (newsText.isEmpty()) {
            newsText = "No title available";
            // Default text if no title or description is found
        }

        int linkIndex = getChildElement(item, "link");
        if (linkIndex != -1) {
            XMLTree linkTag = item.child(linkIndex);
            // Get the text inside the <link> tag
            String link = linkTag.child(0).label();
            // Create a hyperlink
            newsText = "<a href=\"" + link + "\">" + newsText + "</a>";
        }

        // Output table row
        out.println("<tr>");
        out.println("<td>" + date + "</td>"); // Add the publication date
        out.println("<td>" + source + "</td>"); // Add the source
        out.println("<td>" + newsText + "</td>"); // Add the news title or description
        out.println("</tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        // Prompt for RSS feed URL
        out.print("Enter the URL of an RSS 2.0 feed: ");
        String url = in.nextLine();

        // Read XML from URL
        XMLTree xml = new XMLTree1(url);

        // Validate RSS 2.0
        if (!xml.label().equals("rss") || !xml.hasAttribute("version")
                || !xml.attributeValue("version").equals("2.0")) {
            out.println("Error: Invalid RSS 2.0 feed.");
            in.close();
            out.close();
            return;
        }

        // Get channel element
        XMLTree channel = xml.child(0);

        // Prompt for output file
        out.print("Enter the output HTML file name: ");
        String outputFile = in.nextLine();
        SimpleWriter fileOut = new SimpleWriter1L(outputFile);

        // Generate HTML
        outputHeader(channel, fileOut);

        // Process each item in the channel
        for (int i = 0; i < channel.numberOfChildren(); i++) {
            XMLTree child = channel.child(i);
            if (child.isTag() && child.label().equals("item")) {
                // Process each <item> tag
                processItem(child, fileOut);
            }
        }

        outputFooter(fileOut);

        // Close resources
        in.close();
        out.close();
        fileOut.close();
    }

}
